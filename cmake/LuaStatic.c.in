#ifdef __cplusplus
extern "C" {
#endif

#include <lauxlib.h>
#include <lua.h>
#include <lualib.h>

#ifdef __cplusplus
}
#endif

#include <signal.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef LUA_OK
#define LUA_OK 0
#endif

/* Copied from lua.c */

/* Emscripten doesn't support signal() */
#ifndef EMSCRIPTEN
static lua_State *globalL = NULL;

static void lstop(lua_State *L, lua_Debug *_ar) {
    (void)_ar;  /* unused arg. */
    lua_sethook(L, NULL, 0, 0);  /* reset hook */
    luaL_error(L, "interrupted!");
}

static void laction(int i) {
    signal(i, SIG_DFL); /* if another SIGINT happens, terminate process */
    lua_sethook(globalL, lstop, LUA_MASKCALL | LUA_MASKRET | LUA_MASKCOUNT, 1);
}
#endif

static void createargtable(lua_State *L, char **argv, int argc, int script) {
    int i, narg;
    if (script == argc)
        script = 0;  /* no script name? */
    narg = argc - (script + 1);  /* number of positive indices */
    lua_createtable(L, narg, script + 1);
    for (i = 0; i < argc; i++) {
        lua_pushstring(L, argv[i]);
        lua_rawseti(L, -2, i - script);
    }
    lua_setglobal(L, "arg");
}

static int msghandler(lua_State *L) {
    const char *msg = lua_tostring(L, 1);
    if (msg == NULL) {  /* is error object not a string? */
        if (luaL_callmeta(L, 1, "__tostring") &&  /* does it have a metamethod */
                lua_type(L, -1) == LUA_TSTRING)  /* that produces a string? */
            return 1;  /* that is the message */
        else
            msg = lua_pushfstring(L, "(error object is a %s value)", luaL_typename(L, 1));
    }
    /* Call debug.traceback() instead of luaL_traceback() for Lua 5.1 compatibility. */
    lua_getglobal(L, "debug");
    lua_getfield(L, -1, "traceback");
    /* debug */
    lua_remove(L, -2);
    lua_pushstring(L, msg);
    /* original msg */
    lua_remove(L, -3);
    lua_pushinteger(L, 2);  /* skip this function and traceback */
    lua_call(L, 2, 1); /* call debug.traceback */
    return 1;  /* return the traceback */
}

static int docall(lua_State *L, int narg, int nres) {
    int status;
    int base = lua_gettop(L) - narg;  /* function index */
    lua_pushcfunction(L, msghandler);  /* push message handler */
    lua_insert(L, base);  /* put it under function and args */
#ifndef EMSCRIPTEN
    globalL = L;  /* to be available to 'laction' */
    signal(SIGINT, laction);  /* set C-signal handler */
#endif
    status = lua_pcall(L, narg, nres, base);
#ifndef EMSCRIPTEN
    signal(SIGINT, SIG_DFL); /* reset C-signal handler */
#endif
    lua_remove(L, base);  /* remove message handler from the stack */
    return status;
}

int main(int argc, char *argv[])
{
    lua_State *L = luaL_newstate();
    luaL_openlibs(L);
    createargtable(L, argv, argc, 0);

    static const uint8_t lua_loader_program[] = {
@LUA_LOADER@
    };
    if (luaL_loadbuffer(L,
                (const char*)lua_loader_program,
                sizeof(lua_loader_program),
                "@LUA_ENTRYPOINT@") != LUA_OK) {
        fprintf(stderr, "luaL_loadbuffer: %s\n", lua_tostring(L, -1));
        lua_close(L);
        return 1;
    }

    /* lua_bundle */
    lua_newtable(L);

@LUA_MODULES@

@C_MODULES@

    if (docall(L, 1, LUA_MULTRET)) {
        const char *errmsg = lua_tostring(L, 1);
        if (errmsg) {
            fprintf(stderr, "%s\n", errmsg);
        }
        lua_close(L);
        return 1;
    }
    lua_close(L);
    return 0;
}
